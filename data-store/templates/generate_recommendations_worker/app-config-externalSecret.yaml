apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: '{{ .Values.name }}-generate-recommendations-worker-app-config'
spec:
  secretStoreRef:
    name: aws-parameter-store-secretstore
    kind: ClusterSecretStore
  target:
    name: '{{ .Values.name }}-generate-recommendations-worker-app-config'
    template:
      engineVersion: v2
      data:
        app-config.yaml: |
          app:
            name: "{{ .Values.name }}-generate-recommendations-worker"
            runner_type: worker
          log_level: "{{ .Values.worker.logLevel }}"
          jaeger:
            endpoint: "http://localhost:4317"
          db:
            write:
              username: "{{`{{ .databaseUsername }}`}}"
              password: "{{`{{ .databasePassword }}`}}"
              db_name: "{{`{{ .databaseName }}`}}"
              hosts:
              {{`{{- range $value := .databaseHosts | fromJson }}`}}
              - {{`{{ $value | quote }}`}}
              {{`{{- end }}`}}
              ssl_mode: require
            read:
              username: "{{`{{ .databaseUsername }}`}}"
              password: "{{`{{ .databasePassword }}`}}"
              db_name: "{{`{{ .databaseName }}`}}"
              hosts:
              {{`{{- range $value := .databaseHosts | fromJson }}`}}
              - {{`{{ $value | quote }}`}}
              {{`{{- end }}`}}
              ssl_mode: require
          sqs:
            url: "{{`{{ .sqsURL }}`}}"
            msg_count: 10
            visibility_timeout: 60
          recommendationServiceSQS:
            url: "{{`{{ .recommendationServiceSQS }}`}}"
          notification:
            slack_bot_token: "{{`{{.slackBotToken}}`}}"
            channel: "{{ .Values.slackChannelName }}"
          redis:
            endpoints:
            {{`{{- range $value := .privateRedisEndpoint | fromJson }}`}}
            - {{`{{ $value | quote }}`}}
            {{`{{- end }}`}}
            port: "{{`{{.privateRedisPort}}`}}"
            public_endpoint:
            {{`{{- range $value := .publicRedisEndpoint | fromJson }}`}}
            - {{`{{ $value | quote }}`}}
            {{`{{- end }}`}}
            public_port: "{{`{{.publicRedisPort}}`}}"
            public_password: "{{`{{.publicRedisPassword}}`}}"
          dynamodb:
            accounts: "{{ .Values.dynamodb.accounts }}"
            organizations: "{{ .Values.dynamodb.organizations }}"
            resellers: "{{ .Values.dynamodb.resellers }}"
            users: "{{ .Values.dynamodb.users }}"
          buckets:
            agent_payload: "{{ .Values.buckets.agentPayload }}"
            bronze_pricing: "{{ .Values.buckets.bronze_pricing }}"
            silver_pricing: "{{ .Values.buckets.silver_pricing }}"
          pricing_files:
            spot_file_key: "{{ .Values.pricing_files.spot_file_key }}"
            od_file_key: "{{ .Values.pricing_files.od_file_key }}"
  data:
    - secretKey: databaseUsername
      remoteRef:
        key: '{{ .Values.worker.externalSecret.appConfig.databaseCredentials }}'
        property: username
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: databasePassword
      remoteRef:
        key: '{{ .Values.worker.externalSecret.appConfig.databaseCredentials }}'
        property: password
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: databaseName
      remoteRef:
        key: '{{ .Values.worker.externalSecret.appConfig.databaseDetails }}'
        property: database
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: databaseHosts
      remoteRef:
        key: '{{ .Values.worker.externalSecret.appConfig.databaseDetails }}'
        property: hosts
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: sqsURL
      remoteRef:
        key: '{{ .Values.generateRecommendationsSQS }}'
    - secretKey: recommendationServiceSQS
      remoteRef:
        key: "{{ .Values.cronjob.externalSecret.appConfig.recommendationServiceSQS }}"
    - secretKey: slackBotToken
      remoteRef:
        key: '{{ .Values.slackBotToken }}'
    - secretKey: privateRedisEndpoint
      remoteRef:
        key: '{{ .Values.worker.externalSecret.appConfig.privateRedis }}'
        property: HOST
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: privateRedisPort
      remoteRef:
        key: '{{ .Values.worker.externalSecret.appConfig.privateRedis }}'
        property: PORT
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: publicRedisEndpoint
      remoteRef:
        key: '{{ .Values.worker.externalSecret.appConfig.publicRedis }}'
        property: HOST
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: publicRedisPort
      remoteRef:
        key: '{{ .Values.worker.externalSecret.appConfig.publicRedis }}'
        property: PORT
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: publicRedisPassword
      remoteRef:
        key: '{{ .Values.worker.externalSecret.appConfig.publicRedis }}'
        property: PASSWORD
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: generateRecommendationsSQS
      remoteRef:
        key: '{{ .Values.generateRecommendationsSQS }}'