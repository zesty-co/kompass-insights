apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: "{{ .Values.name }}-refresh-clusters-worker-app-config"
spec:
  secretStoreRef:
    name: aws-parameter-store-secretstore
    kind: ClusterSecretStore
  target:
    name: "{{ .Values.name }}-refresh-clusters-worker-app-config"
    template:
      engineVersion: v2
      data:
        app-config.yaml: |
          app:
            name: "{{ .Values.name }}-refresh-clusters-worker"
            runner_type: worker
          log_level: "{{ .Values.worker.logLevel }}"
          jaeger:
            endpoint: "http://jaegertracing-collector.jaegertracing:4318/v1/traces"
          db:
            write:
              username: "{{`{{ .databaseUsername }}`}}"
              password: "{{`{{ .databasePassword }}`}}"
              db_name: "{{`{{ .databaseName }}`}}"
              hosts:
              {{`{{- range $value := .databaseHosts | fromJson }}`}}
              - {{`{{ $value | quote }}`}}
              {{`{{- end }}`}}
              ssl_mode: require
            read:
              username: "{{`{{ .databaseUsername }}`}}"
              password: "{{`{{ .databasePassword }}`}}"
              db_name: "{{`{{ .databaseName }}`}}"
              hosts:
              {{`{{- range $value := .databaseHosts | fromJson }}`}}
              - {{`{{ $value | quote }}`}}
              {{`{{- end }}`}}
              ssl_mode: require
          sqs:
            url: "{{`{{ .sqsURL }}`}}"
            msg_count: 5
            visibility_timeout: 60
          notification:
            slack_bot_token: "{{`{{.slackBotToken}}`}}"
  data:
    - secretKey: databaseUsername
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.databaseCredentials }}"
        property: username
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: databasePassword
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.databaseCredentials }}"
        property: password
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: databaseName
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.databaseDetails }}"
        property: database
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: databaseHosts
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.databaseDetails }}"
        property: hosts
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: sqsURL
      remoteRef:
        key: "{{ .Values.clustersRefreshSQS}}"
    - secretKey: slackBotToken
      remoteRef:
        key: "{{ .Values.slackBotToken }}"


