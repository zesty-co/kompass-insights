apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: "{{ .Values.name }}-worker-app-config"
spec:
  secretStoreRef:
    name: aws-parameter-store-secretstore
    kind: ClusterSecretStore
  target:
    name: "{{ .Values.name }}-worker-app-config"
    template:
      engineVersion: v2
      data:
        app-config.yaml: |
          app:
            name: "{{ .Values.name }}-worker"
            runner_type: worker
          audience: "{{`{{ .audienceAuth0 }}`}}"
          audience_system: "{{`{{ .audienceSystemAuth0 }}`}}"
          log_level: "{{ .Values.worker.logLevel }}"
          auth0:
            domain: "{{`{{ .domainAuth0 }}`}}"
            client_id:  "{{`{{ .auth0CleintId }}`}}"
            client_secret: "{{`{{ .auth0CleintSecret }}`}}"
          jaeger:
            endpoint: "http://jaegertracing-collector.jaegertracing:4318/v1/traces"
          db:
            write:
              username: "{{`{{ .databaseUsername }}`}}"
              password: "{{`{{ .databasePassword }}`}}"
              db_name: "{{`{{ .databaseName }}`}}"
              hosts:
              {{`{{- range $value := .databaseHosts | fromJson }}`}}
              - {{`{{ $value | quote }}`}}
              {{`{{- end }}`}}
              ssl_mode: require
            read:
              username: "{{`{{ .databaseUsername }}`}}"
              password: "{{`{{ .databasePassword }}`}}"
              db_name: "{{`{{ .databaseName }}`}}"
              hosts:
              {{`{{- range $value := .databaseHosts | fromJson }}`}}
              - {{`{{ $value | quote }}`}}
              {{`{{- end }}`}}
              ssl_mode: require
          sqs:
            url: "{{`{{ .sqsURL }}`}}"
            msg_count: 5
            visibility_timeout: 60
          elastic_search:
            username: "{{`{{ .elasticUsername }}`}}"
            password: "{{`{{ .elasticPassword }}`}}"
            hosts:
            {{`{{- range $value := .elasticHosts | fromJson }}`}}
            - {{`{{ $value | quote }}`}}
            {{`{{- end }}`}}
            ssl_mode: require
          notification:
            slack_bot_token: "{{`{{.slackBotToken}}`}}"
            channel: "{{ .Values.slackChannelName }}"
          redis:
            endpoints:
            {{`{{- range $value := .privateRedisEndpoint | fromJson }}`}}
            - {{`{{ $value | quote }}`}}
            {{`{{- end }}`}}
            port: "{{`{{.privateRedisPort}}`}}"
            public_endpoint:
            {{`{{- range $value := .publicRedisEndpoint | fromJson }}`}}
            - {{`{{ $value | quote }}`}}
            {{`{{- end }}`}}
            public_port: "{{`{{.publicRedisPort}}`}}"
            public_password: "{{`{{.publicRedisPassword}}`}}"
          dynamodb:
            accounts: "{{ .Values.dynamodb.accounts }}"
            organizations: "{{ .Values.dynamodb.organizations }}"
            resellers: "{{ .Values.dynamodb.resellers }}"
            users: "{{ .Values.dynamodb.users }}"
          buckets:
            agent_payload: "{{ .Values.buckets.agentPayload }}"
            cluster_state: "{{ .Values.buckets.clusterState }}"
          environment:
            api_stage: "{{`{{ .apiStage }}`}}"
            region: "{{`{{ .region }}`}}"
  data:
    - secretKey: audienceAuth0
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.audienceAuth0 }}"
    - secretKey: domainAuth0
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.domainAuth0 }}"
    - secretKey: audienceSystemAuth0
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.audienceSystemAuth0 }}"
    - secretKey: auth0CleintId
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.auth0Cred }}"
        property: clientId
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: auth0CleintSecret
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.auth0Cred }}"
        property: clientSecret
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: databaseUsername
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.databaseCredentials }}"
        property: username
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: databasePassword
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.databaseCredentials }}"
        property: password
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: databaseName
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.databaseDetails }}"
        property: database
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: databaseHosts
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.databaseDetails }}"
        property: hosts
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: sqsURL
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.sqsQueueURL }}"
    - secretKey: elasticUsername
      remoteRef:
        key: "{{ .Values.api.externalSecret.appConfig.elasticDetails }}"
        property: username
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: elasticPassword
      remoteRef:
        key: "{{ .Values.api.externalSecret.appConfig.elasticDetails }}"
        property: password
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: elasticHosts
      remoteRef:
        key: "{{ .Values.api.externalSecret.appConfig.elasticDetails }}"
        property: hosts
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: slackBotToken
      remoteRef:
        key: "{{ .Values.slackBotToken }}"
    - secretKey: privateRedisEndpoint
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.privateRedis }}"
        property: HOST
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: privateRedisPort
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.privateRedis }}"
        property: PORT
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: publicRedisEndpoint
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.publicRedis }}"
        property: HOST
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: publicRedisPort
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.publicRedis }}"
        property: PORT
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: publicRedisPassword
      remoteRef:
        key: "{{ .Values.worker.externalSecret.appConfig.publicRedis }}"
        property: PASSWORD
      sourceRef:
        storeRef:
          name: aws-secret-manager-secretstore
          kind: ClusterSecretStore
    - secretKey: apiStage
      remoteRef:
        key: "{{ .Values.environment.apiStage }}"
    - secretKey: region
      remoteRef:
      key: "{{ .Values.environment.region }}"